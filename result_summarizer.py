import pandas as pd
import logging
from typing import Optional, Dict, Any, Union

try:
    import openai
except ImportError:
    openai = None

class ResultSummarizer:
    """
    Converts raw SQL query results (as pandas DataFrames) into concise, plain-English summaries
    using NLP models (e.g., GPT-4).
    """

    def __init__(
        self,
        openai_api_key: Optional[str] = None,
        model: str = "gpt-4",
        logger: Optional[logging.Logger] = None,
    ):
        """
        Args:
            openai_api_key: OpenAI API key for GPT-4 access (required for LLM summarization).
            model: LLM model name (default: 'gpt-4').
            logger: Optional logger for process logging.
        """
        self.model = model
        self.logger = logger or logging.getLogger(__name__)
        if openai_api_key:
            if openai is not None:
                openai.api_key = openai_api_key
            else:
                raise ImportError("openai package not found.")
        self.available = openai is not None and openai_api_key is not None

    def summarize(
        self,
        df: pd.DataFrame,
        summary_length: str = "short",
        technical_detail: str = "medium",
        max_rows: int = 100,
        user_instructions: Optional[str] = None
    ) -> Dict[str, Union[str, float, None]]:
        """
        Summarizes the given DataFrame using a language model.

        Args:
            df: Query result DataFrame.
            summary_length: 'short', 'medium', or 'long'.
            technical_detail: 'low', 'medium', or 'high' (for non-technical or technical summary).
            max_rows: Maximum number rows to pass to the LLM for summarization.
            user_instructions: Optional extra instructions for the summary.

        Returns:
            Dict with keys:
                - summary: Generated summary string.
                - confidence: Confidence score (0-1, if available).
                - disclaimer: Any disclaimers about interpretation.
        """
        if not self.available:
            raise RuntimeError("OpenAI API key is not set or openai package not available.")

        df_sample = df.head(max_rows)
        table_text = df_sample.to_csv(index=False)
        n_rows, n_cols = df.shape
        disclaimer = None
        if n_rows > max_rows:
            disclaimer = (
                f"Summary is based on first {max_rows} of {n_rows} rows. Results may not reflect the entire dataset."
            )
        prompt = self._build_prompt(
            table_text, n_rows, n_cols, summary_length, technical_detail, user_instructions, disclaimer
        )

        self.logger.info(f"Summarizing DataFrame: {n_rows} rows, {n_cols} columns")
        self.logger.debug(f"Sampled DataFrame as CSV:\n{table_text}")
        self.logger.debug(f"Prompt to LLM:\n{prompt}")

        try:
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "You are a professional data analyst skilled at converting SQL query results into clear, concise, plain-English summaries for business and technical stakeholders."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.2,
                max_tokens=512,
                stop=None,
            )
            summary = response.choices[0].message["content"].strip()
            self.logger.info("Summary generated by LLM.")

            # Basic confidence: if more data, less confident
            confidence = max(0.5, 1.0 - 0.005 * (n_rows - min(n_rows, max_rows)))
            return {
                "summary": summary,
                "confidence": confidence,
                "disclaimer": disclaimer
            }
        except Exception as e:
            self.logger.error(f"Error during summarization: {e}")
            raise

    def _build_prompt(
        self,
        table_text: str,
        n_rows: int,
        n_cols: int,
        summary_length: str,
        technical_detail: str,
        user_instructions: Optional[str],
        disclaimer: Optional[str]
    ) -> str:
        """
        Builds the prompt for the LLM summarization task.
        """
        prompt = (
            f"The following is a sample of SQL query results: ({n_rows} rows, {n_cols} columns)\n"
            f"CSV sample:\n{table_text}\n\n"
            f"Please write a plain-English summary highlighting key insights, trends, and anomalies in the data."
            f"\n- Summary length: {summary_length}"
            f"\n- Technical detail: {technical_detail}"
            "\n- If you notice possible data quality issues or anomalies, mention them."
            "\n- Avoid quoting raw numbers unless essential."
        )
        if user_instructions:
            prompt += f"\n- Extra instructions: {user_instructions}"
        if disclaimer:
            prompt += f"\n\nNOTE: {disclaimer}"
        prompt += "\n\nProvide a clear, concise summary only. Do not repeat the data as a table."
        return prompt

# Example usage:
# logging.basicConfig(level=logging.INFO)
# summarizer = ResultSummarizer(openai_api_key="sk-...")
# summary_result = summarizer.summarize(df, summary_length="short", technical_detail="low")
# print(summary_result["summary"])
# if summary_result["disclaimer"]:
#     print("Disclaimer:", summary_result["disclaimer"])